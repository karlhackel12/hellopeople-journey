
import React, { useState } from 'react';
import { zodResolver } from '@hookform/resolvers/zod';
import { useForm } from 'react-hook-form';
import * as z from 'zod';
import { Button } from '@/components/ui/button';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import { supabase } from '@/integrations/supabase/client';
import { toast } from 'sonner';
import { addDays } from 'date-fns';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Copy, Check, Mail } from 'lucide-react';
import { Badge } from '@/components/ui/badge';
import { Alert, AlertDescription } from '@/components/ui/alert';

const inviteSchema = z.object({
  email: z.string().email({ message: 'Please enter a valid email address' }),
});

type InviteFormValues = z.infer<typeof inviteSchema>;

const generateCodeSchema = z.object({
  note: z.string().optional(),
});

type GenerateCodeFormValues = z.infer<typeof generateCodeSchema>;

interface StudentInviteFormProps {
  onSuccess: () => void;
}

const StudentInviteForm: React.FC<StudentInviteFormProps> = ({ onSuccess }) => {
  const [activeTab, setActiveTab] = useState('email');
  const [invitationCode, setInvitationCode] = useState<string | null>(null);
  const [copySuccess, setCopySuccess] = useState(false);
  const [isGenerating, setIsGenerating] = useState(false);

  // Form for email invitations
  const emailForm = useForm<InviteFormValues>({
    resolver: zodResolver(inviteSchema),
    defaultValues: {
      email: '',
    },
  });

  // Form for code generation
  const codeForm = useForm<GenerateCodeFormValues>({
    resolver: zodResolver(generateCodeSchema),
    defaultValues: {
      note: '',
    },
  });

  // Handler for email invitations
  const onEmailSubmit = async (values: InviteFormValues) => {
    try {
      // Get current user
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) {
        toast.error('Authentication error', {
          description: 'You must be logged in to invite students',
        });
        return;
      }

      // Get user profile to get the teacher's name
      const { data: profileData } = await supabase
        .from('profiles')
        .select('first_name, last_name')
        .eq('id', userData.user.id)
        .single();

      // Set expiration date (7 days from now)
      const expiresAt = addDays(new Date(), 7).toISOString();

      // Insert invitation - note that invitation_code is automatically generated by a trigger
      const { data, error } = await supabase
        .from('student_invitations')
        .insert({
          email: values.email,
          invited_by: userData.user.id,
          expires_at: expiresAt,
          // The invitation_code field is generated via a trigger in the database
          invitation_code: 'PENDING' // This value will be overwritten by the trigger
        })
        .select();

      if (error) {
        if (error.code === '23505') {
          toast.error('Invitation already sent', {
            description: 'You have already invited this student',
          });
        } else {
          throw error;
        }
        return;
      }

      // Get the generated invitation code from the returned data
      const invitation = data[0];
      
      // Format teacher name for the email
      const teacherName = profileData
        ? `${profileData.first_name || ''} ${profileData.last_name || ''}`.trim()
        : 'Your teacher';

      // Send the invitation email using our edge function
      const { error: emailError } = await supabase.functions.invoke('send-invitation-email', {
        body: {
          email: values.email,
          invitation_code: invitation.invitation_code,
          teacher_name: teacherName
        }
      });

      if (emailError) {
        console.error('Error sending invitation email:', emailError);
        toast.warning('Invitation created but email delivery failed', {
          description: 'The invitation was created but we could not send the email. The student can still use the invitation code.',
        });
      } else {
        toast.success('Invitation sent', {
          description: `An invitation has been sent to ${values.email}`,
        });
      }
      
      emailForm.reset();
      onSuccess();
    } catch (error: any) {
      console.error('Error sending invitation:', error);
      toast.error('Failed to send invitation', {
        description: error.message,
      });
    }
  };

  // Handler for code generation
  const onCodeSubmit = async (values: GenerateCodeFormValues) => {
    try {
      setIsGenerating(true);
      
      // Get current user
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) {
        toast.error('Authentication error', {
          description: 'You must be logged in to generate invitation codes',
        });
        return;
      }

      // Set expiration date (30 days from now for codes)
      const expiresAt = addDays(new Date(), 30).toISOString();

      // Insert invitation without email
      const { data, error } = await supabase
        .from('student_invitations')
        .insert({
          invited_by: userData.user.id,
          expires_at: expiresAt,
          email: '', // Empty email for manual code sharing
          status: 'pending'
        })
        .select();

      if (error) {
        throw error;
      }

      // Get the generated invitation code
      const invitation = data[0];
      setInvitationCode(invitation.invitation_code);
      
      toast.success('Invitation code generated', {
        description: 'Copy and share this code with your student',
      });
      
      codeForm.reset();
    } catch (error: any) {
      console.error('Error generating invitation code:', error);
      toast.error('Failed to generate invitation code', {
        description: error.message,
      });
    } finally {
      setIsGenerating(false);
    }
  };

  // Handler for copying code to clipboard
  const handleCopyCode = async () => {
    if (invitationCode) {
      try {
        await navigator.clipboard.writeText(invitationCode);
        setCopySuccess(true);
        toast.success('Code copied to clipboard');
        
        setTimeout(() => {
          setCopySuccess(false);
        }, 2000);
      } catch (err) {
        console.error('Failed to copy code:', err);
        toast.error('Failed to copy code');
      }
    }
  };

  // Reset the generated code and form
  const handleGenerateAnother = () => {
    setInvitationCode(null);
    codeForm.reset();
  };

  return (
    <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
      <TabsList className="mb-6">
        <TabsTrigger value="email" className="flex items-center gap-2">
          <Mail className="h-4 w-4" />
          <span>Email Invitation</span>
        </TabsTrigger>
        <TabsTrigger value="code" className="flex items-center gap-2">
          <Copy className="h-4 w-4" />
          <span>Generate Code</span>
        </TabsTrigger>
      </TabsList>
      
      <TabsContent value="email">
        <Form {...emailForm}>
          <form onSubmit={emailForm.handleSubmit(onEmailSubmit)} className="space-y-4">
            <FormField
              control={emailForm.control}
              name="email"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Student Email</FormLabel>
                  <FormControl>
                    <Input placeholder="student@example.com" type="email" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            
            <Button 
              type="submit" 
              className="w-full"
              disabled={emailForm.formState.isSubmitting}
            >
              {emailForm.formState.isSubmitting ? 'Sending...' : 'Send Invitation'}
            </Button>
            
            <Alert>
              <AlertDescription>
                An email will be sent to the student with instructions to join the platform.
              </AlertDescription>
            </Alert>
          </form>
        </Form>
      </TabsContent>
      
      <TabsContent value="code">
        {!invitationCode ? (
          <Form {...codeForm}>
            <form onSubmit={codeForm.handleSubmit(onCodeSubmit)} className="space-y-4">
              <FormField
                control={codeForm.control}
                name="note"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Note (Optional)</FormLabel>
                    <FormControl>
                      <Input placeholder="For tracking purposes only" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              <Button 
                type="submit" 
                className="w-full"
                disabled={isGenerating}
              >
                {isGenerating ? 'Generating...' : 'Generate Invitation Code'}
              </Button>
              
              <Alert>
                <AlertDescription>
                  You'll need to manually share this code with your student. They will enter it during signup.
                </AlertDescription>
              </Alert>
            </form>
          </Form>
        ) : (
          <div className="space-y-6">
            <div className="bg-muted p-6 rounded-lg text-center">
              <Badge className="mb-2">Invitation Code</Badge>
              <div className="text-2xl font-mono tracking-wider my-3">{invitationCode}</div>
              <div className="flex justify-center gap-2 mt-4">
                <Button 
                  onClick={handleCopyCode} 
                  variant="outline" 
                  className="flex items-center gap-2"
                >
                  {copySuccess ? (
                    <>
                      <Check className="h-4 w-4" />
                      <span>Copied!</span>
                    </>
                  ) : (
                    <>
                      <Copy className="h-4 w-4" />
                      <span>Copy Code</span>
                    </>
                  )}
                </Button>
                <Button onClick={handleGenerateAnother} variant="secondary">Generate Another</Button>
              </div>
            </div>
            
            <Alert>
              <AlertDescription>
                <p>Share this code with your student. They'll enter it when creating their account.</p>
                <p className="mt-2 text-sm text-muted-foreground">This code will expire in 30 days if unused.</p>
              </AlertDescription>
            </Alert>
          </div>
        )}
      </TabsContent>
    </Tabs>
  );
};

export default StudentInviteForm;
