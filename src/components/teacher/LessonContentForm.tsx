
import React, { useState } from 'react';
import { FormField, FormItem, FormLabel, FormControl, FormMessage } from '@/components/ui/form';
import { Textarea } from '@/components/ui/textarea';
import { UseFormReturn } from 'react-hook-form';
import { LessonFormValues } from './LessonEditor';
import AILessonGenerator from './AILessonGenerator';
import { Badge } from '@/components/ui/badge';
import { InfoIcon } from 'lucide-react';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';

interface LessonContentFormProps {
  form: UseFormReturn<LessonFormValues>;
}

const LessonContentForm: React.FC<LessonContentFormProps> = ({ form }) => {
  const [contentSource, setContentSource] = useState<'manual' | 'ai_generated' | 'mixed'>(
    form.getValues('contentSource') || 'manual'
  );

  const handleContentGenerated = (
    formattedContent: string, 
    structuredContent: any, 
    generationParams: any
  ) => {
    form.setValue('content', formattedContent);
    form.setValue('structuredContent', structuredContent);
    form.setValue('generationMetadata', generationParams);
    form.setValue('contentSource', 'ai_generated');
    setContentSource('ai_generated');
  };

  // When user manually edits content after AI generation
  const handleManualEdit = () => {
    if (contentSource === 'ai_generated') {
      setContentSource('mixed');
      form.setValue('contentSource', 'mixed');
    }
  };

  return (
    <div className="space-y-4">
      <div className="flex justify-between items-center">
        <div className="flex items-center space-x-2">
          {contentSource !== 'manual' && (
            <TooltipProvider>
              <Tooltip>
                <TooltipTrigger asChild>
                  <div className="flex items-center">
                    <Badge variant={contentSource === 'ai_generated' ? 'default' : 'outline'}>
                      {contentSource === 'ai_generated' ? 'AI Generated' : 'AI + Manual Edits'}
                    </Badge>
                    <InfoIcon className="h-4 w-4 ml-1 text-muted-foreground" />
                  </div>
                </TooltipTrigger>
                <TooltipContent>
                  <p>This content was {contentSource === 'mixed' ? 'initially ' : ''}generated by AI{contentSource === 'mixed' ? ' and then manually edited' : ''}.</p>
                </TooltipContent>
              </Tooltip>
            </TooltipProvider>
          )}
        </div>
        <AILessonGenerator 
          title={form.watch('title')} 
          setValue={form.setValue}
          onContentGenerated={handleContentGenerated}
        />
      </div>
      
      <FormField
        control={form.control}
        name="content"
        render={({ field }) => (
          <FormItem>
            <FormLabel>Lesson Content</FormLabel>
            <FormControl>
              <Textarea 
                placeholder="Enter lesson content here..." 
                className="min-h-[300px] font-mono"
                {...field} 
                onChange={(e) => {
                  field.onChange(e);
                  handleManualEdit();
                }}
              />
            </FormControl>
            <FormMessage />
          </FormItem>
        )}
      />
    </div>
  );
};

export default LessonContentForm;
